package org.example.models;

import jakarta.persistence.*;
import java.util.Objects;

@Entity
@Table(name = "subscribed",
        // CRUCIAL ADDITION: Uniqueness constraint to prevent duplicate subscriptions
        // This ensures the student+course combination is unique.
        uniqueConstraints = @UniqueConstraint(columnNames = {"student_id", "course_id"})
)
public class Subscribed {

    @Id // Simple primary key
    @GeneratedValue(strategy = GenerationType.IDENTITY) // Tells JPA to use DB auto-increment
    @Column(name = "subscribed_id") // PK column name for this table
    private Integer subscribedId; // Use Integer (wrapper class) instead of primitive int because of its nullable

    // --- Relationship with student ---
    @ManyToOne(fetch = FetchType.LAZY) // Or FetchType.EAGER
    @JoinColumn(name = "student_id", // FK column name pointing to student
            referencedColumnName = "student_id", // PK column name in student (TO BE VERIFIED!)
            nullable = false)
    private Student student;

    // --- Relationship with course ---
    @ManyToOne(fetch = FetchType.LAZY) // Or FetchType.EAGER
    @JoinColumn(name = "course_id", // FK column name pointing to course
            referencedColumnName = "course_id", // PK column name in course (TO BE VERIFIED!)
            nullable = false)
    private Course course;

    //Empty constructor
    public Subscribed() {
    }

    // Useful constructor (the ID will be generated by the DB)
    public Subscribed(Student student, Course course /*, any other fields */) {
        this.student = student;
        this.course = course;
    }

    // --- Getters and Setters ---

    public Integer getSubscribedId() {
        return subscribedId;
    }

    public Student getStudent() {
        return student;
    }

    public void setStudent(Student student) {
        this.student = student;
    }

    public Course getCourse() {
        return course;
    }

    public void setCourse(Course course) {
        this.course = course;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Subscribed subscribed = (Subscribed) o;
        // Compare only if the ID has been assigned (is not null)
        return subscribedId != null && Objects.equals(subscribedId, subscribed.subscribedId);
    }


    // --- Optional toString() for debugging ---

    @Override
    public String toString() {
        // Potential Issue 3: Incorrect getter methods for IDs used below
        return "subscribed{" +
                "subscribedId=" + subscribedId +
                ", studentId=" + (student != null ? student.getStudentId() : "null") + // Use the actual ID getter from Student (e.g., getUserId())
                ", courseId=" + (course != null ? course.getCourseId() : "null") + // Use the actual ID getter from Course (e.g., getCourseId())
                '}';
    }
}